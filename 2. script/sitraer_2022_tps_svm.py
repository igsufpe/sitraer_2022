# -*- coding: utf-8 -*-
"""sitraer_2022_TPS_SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1txvaCoFJ-1cQC9Tq-shnVZxfaaJWwuJ9

#Machine Learning Applied in the Evaluation of Airport Projects# 
#SITRAER 2022#

Universidade Federal de Pernambuco (UFPE)

Data: Agosto / 2022

Autores:
*   Ítalo Guedes - italo.guedes@ufpe.br
*   Max Andrade - max.andrade@ufpe.br 
*   Cleber Zanchettin - cz@cin.ufpe.br

#Importação das bibliotecas
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from mlxtend.plotting import plot_learning_curves
from sklearn.metrics import confusion_matrix, accuracy_score 
from sklearn.metrics import classification_report

"""#Importação do Dataset (Excel)"""

df = pd.read_csv('/content/sample_data/DATASET_TPS_.csv', delimiter=';')
df.head()

"""#Visualização dos Dados"""

sns.pairplot(df)
plt.show()

"""#Pré-processamento *inputs*"""

X = df.drop('status', axis=1)
y = df.status
X

"""#Convertendo *inputs* categóricos"""

df2 = pd.read_csv('/content/sample_data/DATASET_TPS_.csv', delimiter=';')
df2.head()

X = df2.drop('status', axis=1)
y = df2.status
y

pd.get_dummies(y)

"""#Separando *inputs* e *outputs*"""

from sklearn.preprocessing import MinMaxScaler

normalizador = MinMaxScaler()
X_norm = normalizador.fit_transform(X)
X_norm

"""#Implementando o algoritmo SVM"""

from sklearn.svm import SVC

"""#Treinando o classificador SVM"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

#criando variáveis
X_train, X_test, y_train, y_test = train_test_split(X_norm, y, train_size=2/3, random_state=1)

"""#Separando conjunto de treino e teste"""

svc = SVC()
svc.fit(X_train, y_train)

"""#Acurácia algoritmo SVM"""

accuracy_score(y_test, svc.predict(X_test))

resultado_svc = svc.predict(X_test)

print(classification_report(y_test, resultado_svc))

"""#Avaliando a acurácia do algoritmo SVM

#Avaliando o classificador (a partir de um novo projeto)
"""

novo_projeto = [[2.00, 3.00, 20.00, 3.00]]
normalizador.transform(novo_projeto)
X_new = normalizador.transform(novo_projeto)
X_new

svc.predict(X_new)